<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Servlet</title>
      <link href="/2021/09/27/Servlet/"/>
      <url>/2021/09/27/Servlet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="Servlet使用1–-输出请求头的内容"><a href="#Servlet使用1–-输出请求头的内容" class="headerlink" title="Servlet使用1– 输出请求头的内容"></a>Servlet使用1– 输出请求头的内容</h2><ul><li><p>当浏览器向服务器发送请求的时候，浏览器会把HTTP请求头的信息写入到输出流中去，发送给服务器，Web服务器能够自动的处理来自浏览器的请求信息。</p></li><li><p>当有请求到达的时候，Servlet容器能够自动生成实现了javax.servlet.ServletRequest接口的Request类的对象，并把请求头的信息封装到请求对象中去。这个对象将会以参数的形式传递给Servlet的service()方法。</p></li><li><p>那么，既然，请求头的信息都包含在Request对象中，我们就能输出这些请求的内容。</p></li><li><p>javax.servlet.http.HttpServletRequest接口为我们提供了2个重要的方法，能够获取请求头中的键值对。</p><p>  a)Enumeration<String> javax.servlet.http.HttpServletRequest.getHeaderNames() 返回一个字符串类型的枚举</p><p>  b)Enumeration<String> javax.servlet.http.HttpServletRequest.getHeaders(String name) 返回一个字符串类型的枚举</p></li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">Enumeration&lt;String&gt; enu = request.getHeaderNames();     <span class="comment">//获取请求头</span></span><br><span class="line"><span class="keyword">while</span> (enu.hasMoreElements()) &#123;                         <span class="comment">//判断是否为空</span></span><br><span class="line">String headerName = enu.nextElement();</span><br><span class="line"></span><br><span class="line">String headerValues = request.getHeader(headerName);</span><br><span class="line">System.out.println(headerName + <span class="string">&quot;:&quot;</span> + headerValues);<span class="comment">//输出请求头</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Servlet使用2–-表单元素的处理"><a href="#Servlet使用2–-表单元素的处理" class="headerlink" title="Servlet使用2– 表单元素的处理"></a>Servlet使用2– 表单元素的处理</h2><ul><li>客户端向服务器发送http请求的时候，除了发送请求头数据之外，有时候，需要带一定的数据给服务器，由第一章节内容可以知道，这部分的内容称为：“Optional Request Body”，请求正文。</li><li>当用户通过表单，比如：登录或注册界面，可以向服务器发送请求正文信息。那么，Servlet容器能够解析请求正文的信息，并把这些信息封装到自动生成的Request对象中去，这个对象将被传递给service()方法，作为入参。</li><li>通过String javax.servlet.ServletRequest.getParameter(String name)方法能够拿到表单的数据。如果表单中有多选项，那么，通过Enumeration<String> javax.servlet.ServletRequest.getParameterNames()能够获取多选项的值。</li></ul><p>示例GET请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传入参数</span></span><br><span class="line">&lt;a href=<span class="string">&quot;testShow?name=tom&amp;psd=123456&quot;</span>&gt;servlet&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得参数</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">String name = request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">String psd = request.getParameter(<span class="string">&quot;psd&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;name:&quot;</span> + name);</span><br><span class="line">System.out.println(<span class="string">&quot;psd:&quot;</span> + psd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例POST请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);  <span class="comment">//将编码格式改为UTF-8的类型，防止中文乱码</span></span><br><span class="line">String name = request.getParameter(<span class="string">&quot;Name&quot;</span>);</span><br><span class="line">String pwd = request.getParameter(<span class="string">&quot;pwd&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="sevlet使用的常见问题"><a href="#sevlet使用的常见问题" class="headerlink" title="sevlet使用的常见问题"></a>sevlet使用的常见问题</h2><ul><li>html的引用要使用所创建java程序的url，否则程序无法运行。</li><li><a href="https://blog.csdn.net/qq_31416771/article/details/94407591">解码问题</a></li><li>使用webservlet时，由于是单独的数据库，所以要重新导入SQL包。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO</title>
      <link href="/2021/09/27/test/"/>
      <url>/2021/09/27/test/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://hexo.io/zh-cn/docs/tag-plugins#%E5%BC%95%E7%94%A8%E6%96%87%E7%AB%A0">hexo 引用文章</a></p>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LISHA AND ME</title>
      <link href="/2021/09/26/lisha/"/>
      <url>/2021/09/26/lisha/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f242707cddb4ae14802ffcdd2a98f924e9588d9bacd7185b363507011d52c7d9">9fe58313f6e9246aa2f72ea1bb7d71fbace78e065600064f33f9cb7fa7bbe6979a7a37b82d9faec28a55a327ece63728d41ff1b2c3fc955ca63a0ef94b7d487937a0a2a414e39170703756a6d46b66461ac130d8138da351d0ace1fd6040ade04e9d90cf12acd5ef6d470ba2992a70521d2b2a2664dd1b1d4536bc959e6cb81a0cd8e1162a957912538da39e3857452334a2f6394702b3d660e6f4307fe0449a96404d2bb3ccb4dc526e73f2220f1df258feec7eb3734950170f1814450e8f792d0517be0b22de6b06b54668954dc8453f15681c8d3ef269d89ab08a28d7b6b0a235fb1ab3157c21a6abb3521c4419b1068ba9a60c3c37b32260934053c7141c1aa290448464d644bac178bf854d22807ba027358cfa6cd61f019069a4b9a7992cbd4c85c50c5bb8303d011f1037b57e3e5dd8be3e87eadaec2599945cafbef075fa56a03e6e2d4648fcae748b09630451f2d6c985983646f418d8093818b5b1849486127f9c0519d2f7d6150e1912501d3b8ffd84b267d53d22ba6aa8b1003d9822748c1856a491b8276ff71f9887b453c9e193f1ee726d503da380cf8ebef63d39c602dfc5b2b6a964692010bd56dc83baaae0030fff8833102bbaf6bea25b8e0a0559582023000dafe385f1e1e8266faf52542c56dde7faeb99d35e306c001d5b4d99dc28012e4861441ad7bbf1b534c74c753da155c037d6a7f565e956cc21f25027109088dcc0ce13bc99f6457a6e338fa9949d6cba92ff3c145b4eba6cd81c3212c249ba27cb7c002069668ba435141731f72b7a4d4517d106eec21ae89dfd6f5ff6296d8c0bd02b9aaa92a4b1d1502b5c7f252e014a51e445fcf657bc5bef868f2d5bb7962d8cf9621738076da011c6b36bd8ede5eb76d87b2eba4bcec4187e842c0e4787223e61f9f1e74fa8a3c239ff24f90c2c4b4d67072f3790e356b1737547f45bf3cd56a1c1001ebec10187b09032b8c8f07861e8380e47f166fd641ae24a506a3dc701b7f202ec497e79a858e279bf795d31f69d2e89e127f809904d1514a4e756049bfb92b2bf5c99e80029ead91967efbe263804374ee8bc7ca383bc253d047712026c4a545cc5067a8d7481723be50c3f3ec2872d499febdf8b57b5c942c8c273c7dfc243aa78a4ed2bec24077e7c564a9edded625b85caf8f235369dbc7ebdf100eb13ac5287d0ed87856929dc1dceb752503f17959922a4120988216a87ad5e4ba9fe7f317a8388d9e98cd079d85541036f033208da82</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你需要一个密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> LISHA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LISHA </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
